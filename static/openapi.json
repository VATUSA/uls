{
  "openapi": "3.0.2",
  "info": {
    "title": "VATUSA OAuth2 Provider (ULSv3)",
    "version": "3.0.0",
    "description": "Documentation of the OAuth2 implementation.  See RFC 6749 (https://tools.ietf.org/html/rfc6749) and RFC 7636 (https://datatracker.ietf.org/doc/html/rfc7636) for more details.",
    "contact": {
      "name": "VATUSA Web Team",
      "url": "https://www.vatusa.net",
      "email": "vatusa12@vatusa.net"
    }
  },
  "paths": {
    "/oauth/authorize": {
      "get": {
        "description": "Initializes an OAuth 2.0 flow using a response_type=token. See RFC 6749 (https://tools.ietf.org/html/rfc6749) and RFC 7636 (https://datatracker.ietf.org/doc/html/rfc7636) for more details.",
        "operationId": "Authorize",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "description": "This is the 'client_id' of the requesting client. Maximum 255 characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "description": "Only supported response_type is code",
            "schema": {
              "type": "string",
              "enum": [
                "code"
              ]
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "description": "The 'redirect_uri' that was registered for this client. It is required if multiple redirect_uri's have been registered for this client.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "description": "Not used. Will be shared back verbatim if provided.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "description": "The code_challenge value in the context of PKCE (RFC 7636).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge_method",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "description": "The method that was used to create the code_challenge (S256).",
            "schema": {
              "type": "string",
              "enum": [
                "S256"
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "description": "Value opaque to the server, used by the client to track its session. It will be returned as received.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "location": {
                "description": "Redirect the user away!",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters | Invalid redirect_uri | invalid client type | invalid response type | invalid code_challenge/method"
          },
          "401": {
            "description": "The client could not be authenticated."
          },
          "403": {
            "description": "Forbidden."
          },
          "405": {
            "description": "The HTTP method is not valid"
          },
          "500": {
            "description": "unknown error"
          }
        },
        "summary": "OAuth2 Authorize"
      }
    },
    "/oauth/token": {
      "post": {
        "description": "Request access_token using OAuth 2.0 grant_type: authorization_code. See RFC 6749 for more details.",
        "operationId": "Get Token",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "x-is-map": false,
            "description": "The HTTP basic authorization header containing the client credentials as base64 encoded string (authorization: Basic base64(client_id:client_secret)). This can only be used INSTEAD of the parameters 'client_id', 'client_secret'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "description": "The client_id. This can only be used INSTEAD of using the authorization header. Maximum 255 characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "description": "The client_secret. This can only be used INSTEAD of using the authorization header.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grant_type",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "description": "For grant_type=authorization_code: client_id, client_secret, code, and redirect_uri are required.",
            "schema": {
              "type": "string",
              "enum": [
                "authorization_code"
              ],
              "default": "authorization_code"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "description": "Required if grant_type is authorization_code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "description": "Required if grant_type is authorization_code.  Must contain a valid auth code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "description": "Not used.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_verifier",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "description": "A random value of 43-256 characters. See https://tools.ietf.org/html/rfc7636#section-4 for details.  This parameter is required only when a code_challenge is provided with the authorization request for this session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/authToken200"
          },
          "400": {
            "description": "Bad Request, see x-ca-err for possible error codes"
          },
          "401": {
            "description": "The client could not be authenticated."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Unknown error."
          }
        },
        "summary": "OAuth2 Token"
      }
    },
    "/oauth/certs": {
      "get": {
        "operationId": "Get JWK Keyset",
        "description": "",
        "responses": {
          "200": {
            "description": "Get JWK Keyset used by this OAuth2 Server",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "keys": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "JWK set in JSON array format"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "unknown error"
          }
        },
        "summary": "Get Certificates"
      }
    },
    "/v1/info": {
      "get": {
        "summary": "Get User Info",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-v1-info",
        "security": [
          {
            "OAuth2 Issued Token": []
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://login.vatusa.net",
      "description": "Production OAuth2 Provider"
    }
  ],
  "components": {
    "responses": {
      "authToken200": {
        "description": "A success response that includes the issued token, expire and other details from the OAuth Server",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TokenData"
            }
          }
        }
      }
    },
    "schemas": {
      "TokenData": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The Access Token for the given token request"
          },
          "token_type": {
            "type": "string",
            "description": "The Token Type issued",
            "example": "Bearer"
          },
          "expires_in": {
            "type": "string",
            "description": "The expiry time, in seconds",
            "example": "3600"
          },
          "scope": {
            "type": "string",
            "description": "The issued scope",
            "example": "oob"
          },
          "code_challenge": {
            "type": "string",
            "description": "The calculated code challenge from the verifier using method",
            "example": "jsjdfj312ujtuug"
          },
          "code_challenge_method": {
            "type": "string",
            "description": "Code challenge method (S256 required)",
            "example": "S256"
          }
        },
        "title": "TokenData"
      },
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "cid": {
            "type": "integer"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "facility": {
            "type": "string"
          },
          "rating": {
            "$ref": "#/components/schemas/Rating"
          },
          "homeController": {
            "type": "integer",
            "enum": [
              0,
              1
            ]
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "Rating": {
        "title": "Rating",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "short": {
            "type": "string"
          },
          "long": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "OAuth2 Issued Token": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}